/*
 * This file is generated by Entity Class Compiler, (c) CroTeam 1997-98
 */

#line 2 "C:/MyMod/Sources/EntitiesMP/Reminder.es"

#include "StdH.h"

#include <EntitiesMP/Reminder.h>
#include <EntitiesMP/Reminder_tables.h>
CEntityEvent *EReminderInit::MakeCopy(void) { CEntityEvent *peeCopy = new EReminderInit(*this); return peeCopy;}
EReminderInit::EReminderInit() : CEntityEvent(EVENTCODE_EReminderInit) {;
 ClearToDefault(penOwner);
 ClearToDefault(fWaitTime);
 ClearToDefault(iValue);
};
void CReminder::SetDefaultProperties(void) {
  m_penOwner = NULL;
  m_fWaitTime = 0.0f;
  m_iValue = 0;
  CRationalEntity::SetDefaultProperties();
}
BOOL CReminder::
#line 25 "C:/MyMod/Sources/EntitiesMP/Reminder.es"
Main(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CReminder_Main
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EReminderInit, "CReminder::Main expects 'EReminderInit' as input!");  const EReminderInit &eri = (const EReminderInit &)__eeInput;
#line 27 "C:/MyMod/Sources/EntitiesMP/Reminder.es"
ASSERT  (eri  . penOwner  != NULL );
#line 28 "C:/MyMod/Sources/EntitiesMP/Reminder.es"
m_penOwner  = eri  . penOwner ;
#line 29 "C:/MyMod/Sources/EntitiesMP/Reminder.es"
m_fWaitTime  = eri  . fWaitTime ;
#line 30 "C:/MyMod/Sources/EntitiesMP/Reminder.es"
m_iValue  = eri  . iValue ;
#line 33 "C:/MyMod/Sources/EntitiesMP/Reminder.es"
InitAsVoid  ();
#line 34 "C:/MyMod/Sources/EntitiesMP/Reminder.es"
SetPhysicsFlags  (EPF_MODEL_IMMATERIAL );
#line 35 "C:/MyMod/Sources/EntitiesMP/Reminder.es"
SetCollisionFlags  (ECF_IMMATERIAL );
#line 38 "C:/MyMod/Sources/EntitiesMP/Reminder.es"
if(!(m_fWaitTime  > 0.0f)){ Jump(STATE_CURRENT,0x02bf0003, FALSE, EInternal());return TRUE;}
#line 39 "C:/MyMod/Sources/EntitiesMP/Reminder.es"
SetTimerAfter(m_fWaitTime );
Jump(STATE_CURRENT, 0x02bf0001, FALSE, EBegin());return TRUE;}BOOL CReminder::H0x02bf0001_Main_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x02bf0001
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x02bf0002, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CReminder::H0x02bf0002_Main_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x02bf0002
;
#line 40 "C:/MyMod/Sources/EntitiesMP/Reminder.es"
EReminder  er ;
#line 41 "C:/MyMod/Sources/EntitiesMP/Reminder.es"
er  . iValue  = m_iValue ;
#line 42 "C:/MyMod/Sources/EntitiesMP/Reminder.es"
if(m_penOwner  != NULL ){
#line 43 "C:/MyMod/Sources/EntitiesMP/Reminder.es"
m_penOwner  -> SendEvent  (er );
#line 44 "C:/MyMod/Sources/EntitiesMP/Reminder.es"
}Jump(STATE_CURRENT,0x02bf0003, FALSE, EInternal());return TRUE;}BOOL CReminder::H0x02bf0003_Main_03(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x02bf0003

#line 48 "C:/MyMod/Sources/EntitiesMP/Reminder.es"
Destroy  ();
#line 50 "C:/MyMod/Sources/EntitiesMP/Reminder.es"
Return(STATE_CURRENT,EVoid());
#line 50 "C:/MyMod/Sources/EntitiesMP/Reminder.es"
return TRUE; ASSERT(FALSE); return TRUE;};