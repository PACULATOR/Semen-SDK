/*
 * This file is generated by Entity Class Compiler, (c) CroTeam 1997-98
 */

#line 2 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"

#include "StdH.h"

#include "EntitiesMP/EnemyBase.h"
#include "ModelsMP/Enemies/ExotechLarva/Projectile/TailProjectile.h"


#include <EntitiesMP/LarvaOffspring.h>
#include <EntitiesMP/LarvaOffspring_tables.h>
CEntityEvent *ELaunchLarvaOffspring::MakeCopy(void) { CEntityEvent *peeCopy = new ELaunchLarvaOffspring(*this); return peeCopy;}
ELaunchLarvaOffspring::ELaunchLarvaOffspring() : CEntityEvent(EVENTCODE_ELaunchLarvaOffspring) {;
 ClearToDefault(penLauncher);
};
#line 21 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"

#define ECF_OFFSPRING ( \
  ((ECBI_MODEL|ECBI_BRUSH|ECBI_PROJECTILE_MAGIC|ECBI_PROJECTILE_SOLID|ECBI_ITEM|ECBI_MODEL_HOLDER|ECBI_CORPSE_SOLID)<<ECB_TEST) |\
  ((ECBI_MODEL)<<ECB_IS) |\
  ((ECBI_MODEL)<<ECB_PASS) )

void CLarvaOffspring::SetDefaultProperties(void) {
  m_penLauncher = NULL;
  m_penTarget = NULL;
  m_fIgnoreTime = 0.0f;
  m_fFlyTime = 0.0f;
  m_fStartTime = 0.0f;
  m_fDamageAmount = 0.0f;
  m_fRangeDamageAmount = 0.0f;
  m_fDamageHotSpotRange = 0.0f;
  m_fDamageFallOffRange = 0.0f;
  m_fSoundRange = 0.0f;
  m_bExplode = FALSE ;
  m_aRotateSpeed = 0.0f;
  m_tmExpandBox = 0.0f;
  m_soEffect.SetOwner(this);
m_soEffect.Stop_internal();
  bLockedOn = TRUE ;
  m_penPrediction = NULL;
  CMovableModelEntity::SetDefaultProperties();
}
  
#line 63 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
void CLarvaOffspring::PreMoving(void) {
#line 64 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
if(m_tmExpandBox  > 0){
#line 65 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
if(_pTimer  -> CurrentTick  () > m_fStartTime  + m_tmExpandBox ){
#line 66 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ChangeCollisionBoxIndexWhenPossible  (1);
#line 67 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
m_tmExpandBox  = 0;
#line 68 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
#line 69 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
#line 70 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
CMovableModelEntity  :: PreMoving  ();
#line 71 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
  
#line 73 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
void CLarvaOffspring::Precache() 
#line 74 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
{
#line 75 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
PrecacheSound  (SOUND_LARVETTE );
#line 76 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
PrecacheModel  (MODEL_LARVA_TAIL );
#line 77 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
PrecacheTexture  (TEXTURE_LARVA_TAIL );
#line 78 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
PrecacheClass  (CLASS_BASIC_EFFECT  , BET_ROCKET );
#line 79 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
PrecacheClass  (CLASS_BASIC_EFFECT  , BET_SHOCKWAVE );
#line 80 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
  
#line 82 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
void CLarvaOffspring::InitializeProjectile(void) {
#line 85 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
if(IsDerivedFromClass  (m_penLauncher  , "Enemy Base")){
#line 86 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
m_penTarget  = ((CEnemyBase  *) & * m_penLauncher ) -> m_penEnemy ;
#line 87 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
#line 89 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
InitAsModel  ();
#line 90 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
SetPhysicsFlags  (EPF_MODEL_SLIDING );
#line 91 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
SetCollisionFlags  (ECF_OFFSPRING );
#line 93 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
SetModel  (MODEL_LARVA_TAIL );
#line 94 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
SetModelMainTexture  (TEXTURE_LARVA_TAIL );
#line 95 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
GetModelObject  () -> StretchModel  (FLOAT3D (4.0f , 4.0f , 4.0f));
#line 97 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ModelChangeNotify  ();
#line 99 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
m_soEffect  . Set3DParameters  (50.0f , 10.0f , 1.0f , 1.0f);
#line 100 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
PlaySound  (m_soEffect  , SOUND_LARVETTE  , SOF_3D  | SOF_LOOP );
#line 102 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
LaunchAsPropelledProjectile  (FLOAT3D (0.0f , 0.0f , - 30.0f) , (CMovableEntity  *) (CEntity  *) m_penLauncher );
#line 103 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
SetDesiredRotation  (ANGLE3D (0 , 0 , 0));
#line 104 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
m_fFlyTime  = 12.0f;
#line 105 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
m_fDamageAmount  = 10.0f;
#line 106 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
m_aRotateSpeed  = 275.0f;
#line 107 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
SetHealth  (10.0f);
#line 108 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
  
#line 110 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
void CLarvaOffspring::LarvaTailExplosion(void) {
#line 111 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ESpawnEffect  ese ;
#line 112 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
FLOAT3D vPoint ;
#line 113 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
FLOATplane3D vPlaneNormal ;
#line 114 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
FLOAT fDistanceToEdge ;
#line 117 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ese  . colMuliplier  = C_WHITE  | CT_OPAQUE ;
#line 118 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ese  . betType  = BET_ROCKET ;
#line 119 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ese  . vStretch  = FLOAT3D (1 , 1 , 1);
#line 120 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
SpawnEffect  (GetPlacement  () , ese );
#line 122 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
if(IsDerivedFromClass  (m_penLauncher  , "Player")){
#line 123 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
SpawnRangeSound  (m_penLauncher  , this  , SNDT_PLAYER  , m_fSoundRange );
#line 124 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
#line 127 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ese  . betType  = BET_EXPLOSION_DEBRIS ;
#line 128 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
SpawnEffect  (GetPlacement  () , ese );
#line 131 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ese  . betType  = BET_EXPLOSION_SMOKE ;
#line 132 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
SpawnEffect  (GetPlacement  () , ese );
#line 135 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
if(GetNearestPolygon  (vPoint  , vPlaneNormal  , fDistanceToEdge )){
#line 136 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
if((vPoint  - GetPlacement  () . pl_PositionVector ) . Length  () < 3.5f){
#line 138 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ese  . betType  = BET_EXPLOSIONSTAIN ;
#line 139 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ese  . vNormal  = FLOAT3D (vPlaneNormal );
#line 140 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
SpawnEffect  (CPlacement3D (vPoint  , ANGLE3D (0 , 0 , 0)) , ese );
#line 142 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ese  . betType  = BET_SHOCKWAVE ;
#line 143 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ese  . vNormal  = FLOAT3D (vPlaneNormal );
#line 144 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
SpawnEffect  (CPlacement3D (vPoint  , ANGLE3D (0 , 0 , 0)) , ese );
#line 146 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ese  . betType  = BET_ROCKET_PLANE ;
#line 147 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ese  . vNormal  = FLOAT3D (vPlaneNormal );
#line 148 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
SpawnEffect  (CPlacement3D (vPoint  + ese  . vNormal  / 50.0f , ANGLE3D (0 , 0 , 0)) , ese );
#line 149 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
#line 150 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
#line 151 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
  
#line 158 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
void CLarvaOffspring::ProjectileTouch(CEntityPointer penHit) 
#line 159 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
{
#line 161 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ProjectileHit  ();
#line 164 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
FLOAT3D vDirection ;
#line 165 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
FLOAT fTransLen  = en_vIntendedTranslation  . Length  ();
#line 166 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
if(fTransLen  > 0.5f)
#line 167 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
{
#line 168 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
vDirection  = en_vIntendedTranslation  / fTransLen ;
#line 169 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
#line 170 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
else 
#line 171 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
{
#line 172 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
vDirection  = - en_vGravityDir ;
#line 173 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
#line 175 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
const FLOAT fDamageMul  = GetSeriousDamageMultiplier  (m_penLauncher );
#line 177 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
InflictDirectDamage  (penHit  , m_penLauncher  , DMT_PROJECTILE  , m_fDamageAmount  * fDamageMul  , 
#line 178 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
GetPlacement  () . pl_PositionVector  , vDirection );
#line 180 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
  
#line 183 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
void CLarvaOffspring::ProjectileHit(void) 
#line 184 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
{
#line 186 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
if(m_bExplode ){
#line 187 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
const FLOAT fDamageMul  = GetSeriousDamageMultiplier  (m_penLauncher );
#line 188 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
InflictRangeDamage  (m_penLauncher  , DMT_EXPLOSION  , m_fRangeDamageAmount  * fDamageMul  , 
#line 189 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
GetPlacement  () . pl_PositionVector  , m_fDamageHotSpotRange  , m_fDamageFallOffRange );
#line 190 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
#line 192 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
if(m_fSoundRange  > 0.0f){
#line 193 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ESound  eSound ;
#line 194 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
eSound  . EsndtSound  = SNDT_EXPLOSION ;
#line 195 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
eSound  . penTarget  = m_penLauncher ;
#line 196 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
SendEventInRange  (eSound  , FLOATaabbox3D (GetPlacement  () . pl_PositionVector  , m_fSoundRange ));
#line 197 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
#line 198 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
  
#line 202 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
void CLarvaOffspring::SpawnEffect(const CPlacement3D & plEffect,const ESpawnEffect & eSpawnEffect) {
#line 203 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
CEntityPointer penEffect  = CreateEntity  (plEffect  , CLASS_BASIC_EFFECT );
#line 204 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
penEffect  -> Initialize  (eSpawnEffect );
#line 205 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
  
#line 209 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ANGLE CLarvaOffspring::GetRotationSpeed(ANGLE aWantedAngle,ANGLE aRotateSpeed,FLOAT fWaitFrequency) 
#line 210 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
{
#line 211 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ANGLE aResult ;
#line 213 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
if(aWantedAngle  < - aRotateSpeed  * fWaitFrequency )
#line 214 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
{
#line 216 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
aResult  = - aRotateSpeed ;
#line 217 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
#line 219 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
else if(aWantedAngle  > aRotateSpeed  * fWaitFrequency )
#line 220 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
{
#line 222 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
aResult  = + aRotateSpeed ;
#line 223 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
#line 225 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
else 
#line 226 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
{
#line 227 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
aResult  = aWantedAngle  / fWaitFrequency ;
#line 228 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
#line 229 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
return aResult ;
#line 230 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
BOOL CLarvaOffspring::
#line 237 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
LarvaOffspringGuidedSlide(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CLarvaOffspring_LarvaOffspringGuidedSlide
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CLarvaOffspring::LarvaOffspringGuidedSlide expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 239 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
CEntity  * penObstacle ;
#line 240 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
if(CheckForCollisionNow  (0 , & penObstacle )){
#line 242 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ProjectileTouch  (penObstacle );
#line 243 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
Return(STATE_CURRENT,EEnd  ());
#line 243 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
return TRUE;
#line 244 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
#line 246 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
Jump(STATE_CURRENT,0x01610004, FALSE, EInternal());return TRUE;}BOOL CLarvaOffspring::H0x01610004_LarvaOffspringGuidedSlide_03(const CEntityEvent &__eeInput)
#line 247 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
{
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01610004
if(!(_pTimer  -> CurrentTick  () < (m_fStartTime  + m_fFlyTime ))){ Jump(STATE_CURRENT,0x01610005, FALSE, EInternal());return TRUE;}
#line 248 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
FLOAT fWaitFrequency  = 0.1f;
#line 249 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
if(m_penTarget  != NULL ){
#line 251 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
EntityInfo  * pei  = (EntityInfo  *) (m_penTarget  -> GetEntityInfo  ());
#line 252 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
FLOAT3D vDesiredPosition ;
#line 253 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
GetEntityInfoPosition  (m_penTarget  , pei  -> vSourceCenter  , vDesiredPosition );
#line 254 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
FLOAT3D vDesiredDirection  = (vDesiredPosition  - GetPlacement  () . pl_PositionVector ) . Normalize  ();
#line 256 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ANGLE aWantedHeading  = GetRelativeHeading  (vDesiredDirection );
#line 257 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ANGLE aHeading  = GetRotationSpeed  (aWantedHeading  , m_aRotateSpeed  , fWaitFrequency );
#line 260 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
FLOAT fSpeedDecreasingFactor  = ((180 - abs  (aWantedHeading )) / 180.0f);
#line 262 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
FLOAT fSpeedIncreasingFactor  = (vDesiredPosition  - GetPlacement  () . pl_PositionVector ) . Length  () / 100;
#line 263 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
fSpeedIncreasingFactor  = ClampDn  (fSpeedIncreasingFactor  , 1.0f);
#line 265 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
FLOAT fMaxSpeed  = 30.0f * fSpeedIncreasingFactor ;
#line 266 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
FLOAT fMinSpeedRatio  = 0.5f;
#line 267 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
FLOAT fWantedSpeed  = fMaxSpeed  * (fMinSpeedRatio  + (1 - fMinSpeedRatio ) * fSpeedDecreasingFactor );
#line 269 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
SetDesiredTranslation  (FLOAT3D (0 , 0 , - fWantedSpeed ));
#line 272 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
m_aRotateSpeed  = 75.0f * (1 + 0.5f * fSpeedDecreasingFactor );
#line 275 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
FLOAT fDistanceFactor  = (vDesiredPosition  - GetPlacement  () . pl_PositionVector ) . Length  () / 50.0;
#line 276 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
fDistanceFactor  = ClampUp  (fDistanceFactor  , 4.0f);
#line 277 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
FLOAT fRNDHeading  = (FRnd  () - 0.5f) * 180 * fDistanceFactor ;
#line 280 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
if(abs  (aWantedHeading ) < 30.0f)
#line 281 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
{
#line 283 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
SetDesiredRotation  (ANGLE3D (aHeading  + fRNDHeading  , 0 , 0));
#line 284 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
#line 286 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
else 
#line 287 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
{
#line 288 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
SetDesiredRotation  (ANGLE3D (aHeading  , 0 , 0));
#line 289 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
#line 290 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
#line 292 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
SetTimerAfter(fWaitFrequency );
Jump(STATE_CURRENT, 0x01610002, FALSE, EBegin());return TRUE;}BOOL CLarvaOffspring::H0x01610002_LarvaOffspringGuidedSlide_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01610002
switch(__eeInput.ee_slEvent)
#line 293 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
{case(EVENTCODE_EBegin):{const EBegin&e= (EBegin&)__eeInput;
return TRUE;}ASSERT(FALSE);break;case(EVENTCODE_EPass):{const EPass&epass= (EPass&)__eeInput;

#line 296 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
BOOL bHit ;
#line 298 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
bHit  = epass  . penOther  != m_penLauncher  || _pTimer  -> CurrentTick  () > m_fIgnoreTime ;
#line 300 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
bHit  &= ! IsOfClass  (epass  . penOther  , "LarvaOffspring");
#line 302 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
bHit  &= ! IsOfClass  (epass  . penOther  , "Twister");
#line 303 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
if(bHit ){
#line 304 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ProjectileTouch  (epass  . penOther );
#line 305 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
Return(STATE_CURRENT,EEnd  ());
#line 305 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
return TRUE;
#line 306 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}
#line 307 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
return TRUE;
#line 308 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}ASSERT(FALSE);break;case(EVENTCODE_EDeath):
#line 310 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
{const EDeath&e= (EDeath&)__eeInput;

#line 311 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ProjectileHit  ();
#line 312 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
Return(STATE_CURRENT,EEnd  ());
#line 312 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
return TRUE;
#line 313 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}ASSERT(FALSE);break;case(EVENTCODE_ETimer):
#line 315 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
{const ETimer&e= (ETimer&)__eeInput;

#line 316 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
UnsetTimer();Jump(STATE_CURRENT,0x01610003, FALSE, EInternal());return TRUE;
#line 317 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}ASSERT(FALSE);break;default: return FALSE; break;
#line 318 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}return TRUE;}BOOL CLarvaOffspring::H0x01610003_LarvaOffspringGuidedSlide_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01610003
Jump(STATE_CURRENT,0x01610004, FALSE, EInternal());return TRUE;
#line 319 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
}BOOL CLarvaOffspring::H0x01610005_LarvaOffspringGuidedSlide_04(const CEntityEvent &__eeInput) {
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01610005

#line 320 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
Return(STATE_CURRENT,EEnd  ());
#line 320 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CLarvaOffspring::
#line 324 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
Main(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CLarvaOffspring_Main
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_ELaunchLarvaOffspring, "CLarvaOffspring::Main expects 'ELaunchLarvaOffspring' as input!");  const ELaunchLarvaOffspring &eLaunch = (const ELaunchLarvaOffspring &)__eeInput;
#line 326 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
ASSERT  (eLaunch  . penLauncher  != NULL );
#line 327 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
m_penLauncher  = eLaunch  . penLauncher ;
#line 328 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
SetPredictable  (TRUE );
#line 330 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
m_fIgnoreTime  = _pTimer  -> CurrentTick  () + 1.0f;
#line 332 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
InitializeProjectile  ();
#line 335 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
m_fStartTime  = _pTimer  -> CurrentTick  ();
#line 336 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
STATE_CLarvaOffspring_LarvaOffspringGuidedSlide, TRUE;
Jump(STATE_CURRENT, 0x01610006, FALSE, EBegin());return TRUE;}BOOL CLarvaOffspring::H0x01610006_Main_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01610006
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: Call(STATE_CURRENT, STATE_CLarvaOffspring_LarvaOffspringGuidedSlide, TRUE, EVoid());return TRUE;case EVENTCODE_EEnd: Jump(STATE_CURRENT,0x01610007, FALSE, __eeInput); return TRUE;default: return FALSE; }}BOOL CLarvaOffspring::H0x01610007_Main_02(const CEntityEvent &__eeInput){
#undef STATE_CURRENT
#define STATE_CURRENT 0x01610007
const EEnd&__e= (EEnd&)__eeInput;
;
#line 338 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
LarvaTailExplosion  ();
#line 340 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
Destroy  ();
#line 342 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
Return(STATE_CURRENT,EVoid());
#line 342 "C:/MyMod/Sources/EntitiesMP/LarvaOffspring.es"
return TRUE; ASSERT(FALSE); return TRUE;};