/*
 * This file is generated by Entity Class Compiler, (c) CroTeam 1997-98
 */

#line 2 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"

#include "StdH.h"

#include <EntitiesMP/MirrorMarker.h>
#include <EntitiesMP/MirrorMarker_tables.h>
void CMirrorMarker::SetDefaultProperties(void) {
  m_wrRotation = WR_NONE ;
  m_fRotationSpeed = 90.0f;
  CMarker::SetDefaultProperties();
}
  
#line 32 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
const CTString & CMirrorMarker::GetMirrorName(void) 
#line 33 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
{
#line 34 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
return m_strName ;
#line 35 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
}
  
#line 37 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
void CMirrorMarker::GetMirror(class CMirrorParameters & mpMirror) 
#line 38 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
{
#line 39 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
mpMirror  . mp_ulFlags  = MPF_WARP ;
#line 40 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
mpMirror  . mp_plWarpIn  = GetLerpedPlacement  ();
#line 41 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
if(m_penTarget  != NULL ){
#line 42 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
mpMirror  . mp_penWarpViewer  = m_penTarget ;
#line 43 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
mpMirror  . mp_plWarpOut  = m_penTarget  -> GetLerpedPlacement  ();
#line 44 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
}else {
#line 45 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
mpMirror  . mp_penWarpViewer  = this ;
#line 46 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
mpMirror  . mp_plWarpOut  = GetLerpedPlacement  ();
#line 47 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
}
#line 48 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
FLOAT tmNow  = _pTimer  -> GetLerpedCurrentTick  ();
#line 49 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
mpMirror  . mp_fWarpFOV  = - 1.0f;
#line 50 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
if(m_wrRotation  == WR_BANKING ){
#line 51 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
mpMirror  . mp_plWarpOut  . Rotate_Airplane  (ANGLE3D (0 , 0 , m_fRotationSpeed  * tmNow ));
#line 52 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
}else if(m_wrRotation  == WR_TWIRLING ){
#line 53 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
ANGLE3D a ;
#line 54 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
a  (1) = sin  (tmNow  * 3.9) * 5.0f;
#line 55 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
a  (2) = sin  (tmNow  * 2.7) * 5.0f;
#line 56 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
a  (3) = sin  (tmNow  * 4.5) * 5.0f;
#line 57 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
mpMirror  . mp_plWarpOut  . Rotate_Airplane  (a );
#line 58 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
mpMirror  . mp_fWarpFOV  = 90.0f + sin  (tmNow  * 7.79f) * 5.0f;
#line 59 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
}
#line 60 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
}
BOOL CMirrorMarker::
#line 62 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
Main(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CMirrorMarker_Main
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CMirrorMarker::Main expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 64 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
InitAsEditorModel  ();
#line 65 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
SetPhysicsFlags  (EPF_MODEL_IMMATERIAL );
#line 66 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
SetCollisionFlags  (ECF_IMMATERIAL );
#line 69 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
if(m_penTarget  != NULL ){
#line 70 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
SetModel  (MODEL_IN );
#line 71 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
SetModelMainTexture  (TEXTURE_IN );
#line 72 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
}else {
#line 73 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
SetModel  (MODEL_OUT );
#line 74 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
SetModelMainTexture  (TEXTURE_OUT );
#line 75 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
}
#line 78 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
if(m_strName  == "Marker"){
#line 79 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
m_strName  = "Mirror marker";
#line 80 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
}
#line 81 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
Return(STATE_CURRENT,EVoid());
#line 81 "C:/MyMod/Sources/EntitiesMP/MirrorMarker.es"
return TRUE; ASSERT(FALSE); return TRUE;};